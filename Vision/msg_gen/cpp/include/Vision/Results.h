/* Auto-generated by genmsg_cpp for file /home/mikel/workspace/ros/PacBot/Vision/msg/Results.msg */
#ifndef VISION_MESSAGE_RESULTS_H
#define VISION_MESSAGE_RESULTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vision
{
template <class ContainerAllocator>
struct Results_ {
  typedef Results_<ContainerAllocator> Type;

  Results_()
  : ghostFound(false)
  , ghostPos(0)
  , ghostDistance(0)
  , ghostBlobHeight(0)
  , ghostBlobWidth(0)
  {
  }

  Results_(const ContainerAllocator& _alloc)
  : ghostFound(false)
  , ghostPos(0)
  , ghostDistance(0)
  , ghostBlobHeight(0)
  , ghostBlobWidth(0)
  {
  }

  typedef uint8_t _ghostFound_type;
  uint8_t ghostFound;

  typedef int32_t _ghostPos_type;
  int32_t ghostPos;

  typedef int32_t _ghostDistance_type;
  int32_t ghostDistance;

  typedef int32_t _ghostBlobHeight_type;
  int32_t ghostBlobHeight;

  typedef int32_t _ghostBlobWidth_type;
  int32_t ghostBlobWidth;


  typedef boost::shared_ptr< ::Vision::Results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Vision::Results_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Results
typedef  ::Vision::Results_<std::allocator<void> > Results;

typedef boost::shared_ptr< ::Vision::Results> ResultsPtr;
typedef boost::shared_ptr< ::Vision::Results const> ResultsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Vision::Results_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Vision::Results_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Vision::Results_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Vision::Results_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c2ae8e99c3de0ce82f713df20b464081";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc2ae8e99c3de0ce8ULL;
  static const uint64_t static_value2 = 0x2f713df20b464081ULL;
};

template<class ContainerAllocator>
struct DataType< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Vision/Results";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool    ghostFound\n\
int32    ghostPos\n\
int32    ghostDistance\n\
int32    ghostBlobHeight\n\
int32    ghostBlobWidth\n\
";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Vision::Results_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Vision::Results_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ghostFound);
    stream.next(m.ghostPos);
    stream.next(m.ghostDistance);
    stream.next(m.ghostBlobHeight);
    stream.next(m.ghostBlobWidth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Results_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Vision::Results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Vision::Results_<ContainerAllocator> & v) 
  {
    s << indent << "ghostFound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ghostFound);
    s << indent << "ghostPos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ghostPos);
    s << indent << "ghostDistance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ghostDistance);
    s << indent << "ghostBlobHeight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ghostBlobHeight);
    s << indent << "ghostBlobWidth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ghostBlobWidth);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_RESULTS_H

