/* Auto-generated by genmsg_cpp for file /home/mikel/workspace/ros/PacBot/Echoes/msg/IR.msg */
#ifndef ECHOES_MESSAGE_IR_H
#define ECHOES_MESSAGE_IR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Echoes
{
template <class ContainerAllocator>
struct IR_ {
  typedef IR_<ContainerAllocator> Type;

  IR_()
  : northRight(0)
  , northLeft(0)
  , east(0)
  , west(0)
  {
  }

  IR_(const ContainerAllocator& _alloc)
  : northRight(0)
  , northLeft(0)
  , east(0)
  , west(0)
  {
  }

  typedef int32_t _northRight_type;
  int32_t northRight;

  typedef int32_t _northLeft_type;
  int32_t northLeft;

  typedef int32_t _east_type;
  int32_t east;

  typedef int32_t _west_type;
  int32_t west;


  typedef boost::shared_ptr< ::Echoes::IR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Echoes::IR_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IR
typedef  ::Echoes::IR_<std::allocator<void> > IR;

typedef boost::shared_ptr< ::Echoes::IR> IRPtr;
typedef boost::shared_ptr< ::Echoes::IR const> IRConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Echoes::IR_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Echoes::IR_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Echoes

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Echoes::IR_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Echoes::IR_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Echoes::IR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3ada26730aaa06af637acfbc085e722";
  }

  static const char* value(const  ::Echoes::IR_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3ada26730aaa06aULL;
  static const uint64_t static_value2 = 0xf637acfbc085e722ULL;
};

template<class ContainerAllocator>
struct DataType< ::Echoes::IR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/IR";
  }

  static const char* value(const  ::Echoes::IR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Echoes::IR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 northRight\n\
int32 northLeft\n\
int32 east\n\
int32 west\n\
\n\
";
  }

  static const char* value(const  ::Echoes::IR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Echoes::IR_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Echoes::IR_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.northRight);
    stream.next(m.northLeft);
    stream.next(m.east);
    stream.next(m.west);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IR_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Echoes::IR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Echoes::IR_<ContainerAllocator> & v) 
  {
    s << indent << "northRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.northRight);
    s << indent << "northLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.northLeft);
    s << indent << "east: ";
    Printer<int32_t>::stream(s, indent + "  ", v.east);
    s << indent << "west: ";
    Printer<int32_t>::stream(s, indent + "  ", v.west);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ECHOES_MESSAGE_IR_H

