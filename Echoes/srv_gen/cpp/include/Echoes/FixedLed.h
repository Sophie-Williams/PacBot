/* Auto-generated by genmsg_cpp for file /home/mikel/workspace/ros/PacBot/Echoes/srv/FixedLed.srv */
#ifndef ECHOES_SERVICE_FIXEDLED_H
#define ECHOES_SERVICE_FIXEDLED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Echoes
{
template <class ContainerAllocator>
struct FixedLedRequest_ {
  typedef FixedLedRequest_<ContainerAllocator> Type;

  FixedLedRequest_()
  : numOn(0)
  {
  }

  FixedLedRequest_(const ContainerAllocator& _alloc)
  : numOn(0)
  {
  }

  typedef uint8_t _numOn_type;
  uint8_t numOn;


  typedef boost::shared_ptr< ::Echoes::FixedLedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Echoes::FixedLedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FixedLedRequest
typedef  ::Echoes::FixedLedRequest_<std::allocator<void> > FixedLedRequest;

typedef boost::shared_ptr< ::Echoes::FixedLedRequest> FixedLedRequestPtr;
typedef boost::shared_ptr< ::Echoes::FixedLedRequest const> FixedLedRequestConstPtr;



template <class ContainerAllocator>
struct FixedLedResponse_ {
  typedef FixedLedResponse_<ContainerAllocator> Type;

  FixedLedResponse_()
  : requestSuccessful(false)
  {
  }

  FixedLedResponse_(const ContainerAllocator& _alloc)
  : requestSuccessful(false)
  {
  }

  typedef uint8_t _requestSuccessful_type;
  uint8_t requestSuccessful;


  typedef boost::shared_ptr< ::Echoes::FixedLedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Echoes::FixedLedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FixedLedResponse
typedef  ::Echoes::FixedLedResponse_<std::allocator<void> > FixedLedResponse;

typedef boost::shared_ptr< ::Echoes::FixedLedResponse> FixedLedResponsePtr;
typedef boost::shared_ptr< ::Echoes::FixedLedResponse const> FixedLedResponseConstPtr;


struct FixedLed
{

typedef FixedLedRequest Request;
typedef FixedLedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FixedLed
} // namespace Echoes

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Echoes::FixedLedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Echoes::FixedLedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Echoes::FixedLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aa19facf7b3fbce205d3cb84e63e5359";
  }

  static const char* value(const  ::Echoes::FixedLedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaa19facf7b3fbce2ULL;
  static const uint64_t static_value2 = 0x05d3cb84e63e5359ULL;
};

template<class ContainerAllocator>
struct DataType< ::Echoes::FixedLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/FixedLedRequest";
  }

  static const char* value(const  ::Echoes::FixedLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Echoes::FixedLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 numOn\n\
\n\
\n\
";
  }

  static const char* value(const  ::Echoes::FixedLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Echoes::FixedLedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Echoes::FixedLedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Echoes::FixedLedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Echoes::FixedLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b6d4c3b5d9d236dae096b76debe50d5";
  }

  static const char* value(const  ::Echoes::FixedLedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6b6d4c3b5d9d236dULL;
  static const uint64_t static_value2 = 0xae096b76debe50d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::Echoes::FixedLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/FixedLedResponse";
  }

  static const char* value(const  ::Echoes::FixedLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Echoes::FixedLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool requestSuccessful\n\
\n\
\n\
";
  }

  static const char* value(const  ::Echoes::FixedLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Echoes::FixedLedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Echoes::FixedLedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numOn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FixedLedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Echoes::FixedLedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.requestSuccessful);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FixedLedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Echoes::FixedLed> {
  static const char* value() 
  {
    return "11f70e05a6919339d1ae396aecd2f3c3";
  }

  static const char* value(const Echoes::FixedLed&) { return value(); } 
};

template<>
struct DataType<Echoes::FixedLed> {
  static const char* value() 
  {
    return "Echoes/FixedLed";
  }

  static const char* value(const Echoes::FixedLed&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Echoes::FixedLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11f70e05a6919339d1ae396aecd2f3c3";
  }

  static const char* value(const Echoes::FixedLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Echoes::FixedLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/FixedLed";
  }

  static const char* value(const Echoes::FixedLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Echoes::FixedLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11f70e05a6919339d1ae396aecd2f3c3";
  }

  static const char* value(const Echoes::FixedLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Echoes::FixedLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/FixedLed";
  }

  static const char* value(const Echoes::FixedLedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ECHOES_SERVICE_FIXEDLED_H

