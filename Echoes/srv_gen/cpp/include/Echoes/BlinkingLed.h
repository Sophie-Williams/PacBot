/* Auto-generated by genmsg_cpp for file /home/mikel/workspace/ros/PacBot/PacBot/Echoes/srv/BlinkingLed.srv */
#ifndef ECHOES_SERVICE_BLINKINGLED_H
#define ECHOES_SERVICE_BLINKINGLED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Echoes
{
template <class ContainerAllocator>
struct BlinkingLedRequest_ {
  typedef BlinkingLedRequest_<ContainerAllocator> Type;

  BlinkingLedRequest_()
  : on(false)
  , blinks(false)
  {
  }

  BlinkingLedRequest_(const ContainerAllocator& _alloc)
  : on(false)
  , blinks(false)
  {
  }

  typedef uint8_t _on_type;
  uint8_t on;

  typedef uint8_t _blinks_type;
  uint8_t blinks;


  typedef boost::shared_ptr< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Echoes::BlinkingLedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlinkingLedRequest
typedef  ::Echoes::BlinkingLedRequest_<std::allocator<void> > BlinkingLedRequest;

typedef boost::shared_ptr< ::Echoes::BlinkingLedRequest> BlinkingLedRequestPtr;
typedef boost::shared_ptr< ::Echoes::BlinkingLedRequest const> BlinkingLedRequestConstPtr;



template <class ContainerAllocator>
struct BlinkingLedResponse_ {
  typedef BlinkingLedResponse_<ContainerAllocator> Type;

  BlinkingLedResponse_()
  : requestSuccessful(false)
  {
  }

  BlinkingLedResponse_(const ContainerAllocator& _alloc)
  : requestSuccessful(false)
  {
  }

  typedef uint8_t _requestSuccessful_type;
  uint8_t requestSuccessful;


  typedef boost::shared_ptr< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Echoes::BlinkingLedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlinkingLedResponse
typedef  ::Echoes::BlinkingLedResponse_<std::allocator<void> > BlinkingLedResponse;

typedef boost::shared_ptr< ::Echoes::BlinkingLedResponse> BlinkingLedResponsePtr;
typedef boost::shared_ptr< ::Echoes::BlinkingLedResponse const> BlinkingLedResponseConstPtr;


struct BlinkingLed
{

typedef BlinkingLedRequest Request;
typedef BlinkingLedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BlinkingLed
} // namespace Echoes

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Echoes::BlinkingLedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "53095c198b4a7b723a7d4c97845aef2f";
  }

  static const char* value(const  ::Echoes::BlinkingLedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x53095c198b4a7b72ULL;
  static const uint64_t static_value2 = 0x3a7d4c97845aef2fULL;
};

template<class ContainerAllocator>
struct DataType< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/BlinkingLedRequest";
  }

  static const char* value(const  ::Echoes::BlinkingLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool on\n\
bool blinks\n\
\n\
\n\
";
  }

  static const char* value(const  ::Echoes::BlinkingLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Echoes::BlinkingLedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Echoes::BlinkingLedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b6d4c3b5d9d236dae096b76debe50d5";
  }

  static const char* value(const  ::Echoes::BlinkingLedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6b6d4c3b5d9d236dULL;
  static const uint64_t static_value2 = 0xae096b76debe50d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/BlinkingLedResponse";
  }

  static const char* value(const  ::Echoes::BlinkingLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool requestSuccessful\n\
\n\
";
  }

  static const char* value(const  ::Echoes::BlinkingLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Echoes::BlinkingLedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Echoes::BlinkingLedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.on);
    stream.next(m.blinks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlinkingLedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Echoes::BlinkingLedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.requestSuccessful);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlinkingLedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Echoes::BlinkingLed> {
  static const char* value() 
  {
    return "3fbdacaab452e57ecfde1d88f4f7b065";
  }

  static const char* value(const Echoes::BlinkingLed&) { return value(); } 
};

template<>
struct DataType<Echoes::BlinkingLed> {
  static const char* value() 
  {
    return "Echoes/BlinkingLed";
  }

  static const char* value(const Echoes::BlinkingLed&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Echoes::BlinkingLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3fbdacaab452e57ecfde1d88f4f7b065";
  }

  static const char* value(const Echoes::BlinkingLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Echoes::BlinkingLedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/BlinkingLed";
  }

  static const char* value(const Echoes::BlinkingLedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Echoes::BlinkingLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3fbdacaab452e57ecfde1d88f4f7b065";
  }

  static const char* value(const Echoes::BlinkingLedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Echoes::BlinkingLedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Echoes/BlinkingLed";
  }

  static const char* value(const Echoes::BlinkingLedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ECHOES_SERVICE_BLINKINGLED_H

